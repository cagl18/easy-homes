{"version":3,"sources":["js/layout/account/card/card.js","js/layout/account/changePassword.js"],"names":["accountCard","children","title","className","initialState","fields","currentPassword","newPassword","newPasswordConfirm","errors","showSpinner","AccountChangePassword","state","validateForm","formIsValid","length","setState","onChangedHandler","e","target","fieldName","name","value","updateState","updatedError","onSubmitHandler","preventDefault","props","changeUserPassword","cardBody","onSubmit","this","htmlFor","type","onChange","loading","auth","isFetching","Component","connect","dispatch","credentials"],"mappings":"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","file":"static/js/4.a8c34d8c.chunk.js","sourcesContent":["import React from 'react';\n\nconst accountCard = ({ children, title }) => {\n  return (\n    <section className=\"account__card\">\n      <h4 className=\"heading-quaternary\">\n        {title}\n        <div className=\"heading-divider\"></div>\n      </h4>\n      <div className=\"account__card--body\">{children}</div>\n    </section>\n  );\n};\n\nexport default accountCard;\n","import React, { Component } from 'react';\nimport AccountCard from './card/card';\nimport Button from '../../components/UI/button';\nimport { connect } from 'react-redux';\nimport { changeUserPassword } from '../../../store/actions';\n\nconst initialState = {\n  fields: {\n    currentPassword: '',\n    newPassword: '',\n    newPasswordConfirm: '',\n  },\n  errors: {},\n  showSpinner: false,\n};\n\nclass AccountChangePassword extends Component {\n  state = initialState;\n\n  validateForm = () => {\n    let fields = this.state.fields;\n    let errors = {};\n    let formIsValid = true;\n\n    //Password\n    if (!fields['currentPassword']) {\n      formIsValid = false;\n      errors['currentPassword'] = 'Password cannot be empty!';\n    }\n\n    if (formIsValid && typeof fields['currentPassword'] !== 'undefined') {\n      if (!(fields['currentPassword'].length > 7)) {\n        formIsValid = false;\n        errors['currentPassword'] =\n          'Password needs to be at least 8 characters.';\n      }\n    }\n\n    //newPassword\n    if (!fields['newPassword']) {\n      formIsValid = false;\n      errors['newPassword'] = 'New Password cannot be empty!';\n    }\n\n    //newPasswordConfirm\n    if (!fields['newPasswordConfirm']) {\n      formIsValid = false;\n      errors['newPasswordConfirm'] = 'Confirm password cannot be empty!';\n    }\n\n    if (formIsValid && typeof fields['newPassword'] !== 'undefined') {\n      if (!(fields['newPassword'].length > 7)) {\n        formIsValid = false;\n        errors['newPassword'] =\n          'New password needs to be at least 8 characters.';\n      }\n    }\n\n    if (formIsValid && typeof fields['newPasswordConfirm'] !== 'undefined') {\n      if (!(fields['newPasswordConfirm'].length > 7)) {\n        formIsValid = false;\n        errors['newPasswordConfirm'] =\n          'Confirm password needs to be at least 8 characters.';\n      }\n    }\n\n    if (\n      formIsValid &&\n      !(fields['newPassword'] === fields['newPasswordConfirm'])\n    ) {\n      formIsValid = false;\n      errors['newPasswordConfirm'] = 'Confirm password does not match';\n    }\n\n    // if (typeof fields['currentPassword'] !== 'undefined') {\n    //   if (!fields['name'].match(/^[a-zA-Z]+$/)) {\n    //     formIsValid = false;\n    //     errors['name'] = 'Only letters';\n    //   }\n    // }\n\n    this.setState({ errors });\n    return formIsValid;\n  };\n\n  onChangedHandler = (e) => {\n    const { name: fieldName, value } = e.target;\n    const updateState = { ...this.state.fields, [fieldName]: value };\n    const updatedError = { ...this.state.errors, [fieldName]: '' };\n    this.setState({\n      fields: updateState,\n      errors: updatedError,\n      showSpinner: false,\n    });\n  };\n  onSubmitHandler = (e) => {\n    e.preventDefault();\n    const valid = this.validateForm();\n\n    if (valid) {\n      //if no errors, clear form\n      this.props.changeUserPassword(this.state.fields);\n      this.setState({ ...initialState, showSpinner: true });\n    }\n  };\n  render() {\n    const cardBody = (\n      <form className=\"form\" onSubmit={this.onSubmitHandler}>\n        <label htmlFor=\"currentPassword\">\n          <p>Current Password</p>\n          <input\n            className={this.state.errors.currentPassword ? 'error' : ''}\n            type=\"password\"\n            name=\"currentPassword\"\n            onChange={this.onChangedHandler}\n            value={this.state.fields.currentPassword}\n          />\n        </label>\n        <small className=\"error\">{this.state.errors.currentPassword}</small>\n        <label htmlFor=\"newPassword\">\n          <p>New Password</p>\n          <input\n            className={this.state.errors.newPassword ? 'error' : ''}\n            type=\"password\"\n            name=\"newPassword\"\n            onChange={this.onChangedHandler}\n            value={this.state.fields.newPassword}\n          />\n        </label>\n        <small className=\"error\">{this.state.errors.newPassword}</small>\n        <label htmlFor=\"newPasswordConfirm\">\n          <p>Confirm Password</p>\n          <input\n            className={this.state.errors.newPasswordConfirm ? 'error' : ''}\n            type=\"password\"\n            name=\"newPasswordConfirm\"\n            onChange={this.onChangedHandler}\n            value={this.state.fields.newPasswordConfirm}\n          />\n        </label>\n        <small className=\"error\">{this.state.errors.newPasswordConfirm}</small>\n\n        <Button\n          className=\"default btn-sm\"\n          loading={this.state.showSpinner && this.props.auth?.isFetching}\n        >\n          save\n        </Button>\n      </form>\n    );\n\n    return (\n      <div className=\"account__changePassword\">\n        <AccountCard title=\"Change Password\">{cardBody}</AccountCard>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    auth: state.auth,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    changeUserPassword: (credentials) =>\n      dispatch(changeUserPassword(credentials)),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AccountChangePassword);\n"],"sourceRoot":""}